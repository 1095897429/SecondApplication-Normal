package com.ngbj.browser2.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEY_BEAN".
*/
public class KeyBeanDao extends AbstractDao<KeyBean, Long> {

    public static final String TABLENAME = "KEY_BEAN";

    /**
     * Properties of entity KeyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KeyName = new Property(1, String.class, "keyName", false, "KEY_NAME");
        public final static Property CurrentTime = new Property(2, String.class, "currentTime", false, "CURRENT_TIME");
    };


    public KeyBeanDao(DaoConfig config) {
        super(config);
    }
    
    public KeyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY_NAME\" TEXT," + // 1: keyName
                "\"CURRENT_TIME\" TEXT);"); // 2: currentTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KeyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String keyName = entity.getKeyName();
        if (keyName != null) {
            stmt.bindString(2, keyName);
        }
 
        String currentTime = entity.getCurrentTime();
        if (currentTime != null) {
            stmt.bindString(3, currentTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KeyBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String keyName = entity.getKeyName();
        if (keyName != null) {
            stmt.bindString(2, keyName);
        }
 
        String currentTime = entity.getCurrentTime();
        if (currentTime != null) {
            stmt.bindString(3, currentTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KeyBean readEntity(Cursor cursor, int offset) {
        KeyBean entity = new KeyBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // keyName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // currentTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KeyBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKeyName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCurrentTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KeyBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KeyBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
